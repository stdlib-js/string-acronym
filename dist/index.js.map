{
  "version": 3,
  "sources": ["../lib/validate.js", "../lib/stopwords.json", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isStringArray = require( '@stdlib/assert-is-string-array' ).primitives;\nvar isEmptyArray = require( '@stdlib/assert-is-empty-array' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - options to validate\n* @param {StringArray} [options.stopwords] - array of custom stop words\n* @returns {(null|Error)} error object or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'stopwords': [ 'of' ]\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'stopwords' ) ) {\n\t\topts.stopwords = options.stopwords;\n\t\tif (\n\t\t\t!isStringArray( opts.stopwords ) &&\n\t\t\t!isEmptyArray( opts.stopwords )\n\t\t) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array of strings. Option: `%s`.', 'stopwords', opts.stopwords ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "[\n    \"a\",\n    \"all\",\n    \"also\",\n    \"although\",\n    \"an\",\n    \"and\",\n    \"any\",\n    \"are\",\n    \"as\",\n    \"at\",\n    \"b\",\n    \"be\",\n    \"been\",\n    \"but\",\n    \"by\",\n    \"c\",\n    \"could\",\n    \"d\",\n    \"e\",\n    \"each\",\n    \"eg\",\n    \"either\",\n    \"even\",\n    \"ever\",\n    \"ex\",\n    \"except\",\n    \"f\",\n    \"far\",\n    \"few\",\n    \"for\",\n    \"from\",\n    \"further\",\n    \"g\",\n    \"get\",\n    \"gets\",\n    \"given\",\n    \"gives\",\n    \"go\",\n    \"going\",\n    \"got\",\n    \"h\",\n    \"had\",\n    \"has\",\n    \"have\",\n    \"having\",\n    \"he\",\n    \"her\",\n    \"here\",\n    \"herself\",\n    \"him\",\n    \"himself\",\n    \"his\",\n    \"how\",\n    \"i\",\n    \"ie\",\n    \"if\",\n    \"in\",\n    \"into\",\n    \"is\",\n    \"it\",\n    \"its\",\n    \"itself\",\n    \"j\",\n    \"just\",\n    \"k\",\n    \"l\",\n    \"less\",\n    \"let\",\n    \"m\",\n    \"many\",\n    \"may\",\n    \"me\",\n    \"might\",\n    \"must\",\n    \"my\",\n    \"myself\",\n    \"n\",\n    \"need\",\n    \"needs\",\n    \"next\",\n    \"no\",\n    \"non\",\n    \"not\",\n    \"now\",\n    \"o\",\n    \"of\",\n    \"off\",\n    \"old\",\n    \"on\",\n    \"once\",\n    \"only\",\n    \"or\",\n    \"our\",\n    \"out\",\n    \"p\",\n    \"per\",\n    \"put\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"same\",\n    \"shall\",\n    \"she\",\n    \"should\",\n    \"since\",\n    \"so\",\n    \"such\",\n    \"sure\",\n    \"t\",\n    \"than\",\n    \"that\",\n    \"the\",\n    \"their\",\n    \"them\",\n    \"then\",\n    \"there\",\n    \"these\",\n    \"they\",\n    \"this\",\n    \"those\",\n    \"though\",\n    \"thus\",\n    \"to\",\n    \"too\",\n    \"u\",\n    \"us\",\n    \"v\",\n    \"w\",\n    \"was\",\n    \"we\",\n    \"well\",\n    \"went\",\n    \"were\",\n    \"what\",\n    \"when\",\n    \"where\",\n    \"which\",\n    \"who\",\n    \"whose\",\n    \"why\",\n    \"will\",\n    \"would\",\n    \"x\",\n    \"y\",\n    \"yet\",\n    \"z\"\n]\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar removePunctuation = require( '@stdlib/string-remove-punctuation' );\nvar tokenize = require( '@stdlib/nlp-tokenize' );\nvar replace = require( '@stdlib/string-base-replace' );\nvar uppercase = require( '@stdlib/string-base-uppercase' );\nvar lowercase = require( '@stdlib/string-base-lowercase' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar contains = require( '@stdlib/array-base-assert-contains' ).factory;\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\nvar STOPWORDS = require( './stopwords.json' );\n\n\n// VARIABLES //\n\nvar RE_HYPHEN = /-/g;\n\n\n// MAIN //\n\n/**\n* Generates an acronym for a given string.\n*\n* ## Notes\n*\n* -   The acronym is generated by capitalizing the first letter of each word in the string.\n* -   The function removes stop words from the string before generating the acronym.\n* -   The function splits hyphenated words and uses the first character of each hyphenated part.\n*\n* @param {string} str - input string\n* @param {Options} [options] - function options\n* @param {StringArray} [options.stopwords] - custom stop words\n* @throws {TypeError} must provide a string primitive\n* @throws {TypeError} must provide valid options\n* @returns {string} generated acronym\n*\n* @example\n* var out = acronym( 'the quick brown fox' );\n* // returns 'QBF'\n*\n* @example\n* var out = acronym( 'Hard-boiled eggs' );\n* // returns 'HBE'\n*\n* @example\n* var out = acronym( 'National Association of Securities Dealers Automated Quotation' );\n* // returns 'NASDAQ'\n*/\nfunction acronym( str, options ) {\n\tvar isStopWord;\n\tvar words;\n\tvar opts;\n\tvar err;\n\tvar out;\n\tvar i;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tisStopWord = contains( opts.stopwords || STOPWORDS );\n\tstr = removePunctuation( str );\n\tstr = replace( str, RE_HYPHEN, ' ' );\n\twords = tokenize( str );\n\tout = '';\n\tfor ( i = 0; i < words.length; i++ ) {\n\t\tif ( isStopWord( lowercase( words[ i ] ) ) === false ) {\n\t\t\tout += uppercase( words[ i ].charAt( 0 ) );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = acronym;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Generate an acronym for a given string.\n*\n* @module @stdlib/string-acronym\n*\n* @example\n* var acronym = require( '@stdlib/string-acronym' );\n*\n* var out = acronym( 'National Association of Securities Dealers Automated Quotation' );\n* // returns 'NASDAQ'\n*\n* out = acronym( 'To be determined...', {\n*     'stopwords': []\n* });\n* // returns 'TBD'\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,gCAAiC,EAC1DC,EAAa,QAAS,iCAAkC,EACxDC,EAAgB,QAAS,gCAAiC,EAAE,WAC5DC,EAAe,QAAS,+BAAgC,EACxDC,EAAS,QAAS,uBAAwB,EAwB9C,SAASC,EAAUC,EAAMC,EAAU,CAClC,OAAMP,EAAeO,CAAQ,EAGxBN,EAAYM,EAAS,WAAY,IACrCD,EAAK,UAAYC,EAAQ,UAExB,CAACL,EAAeI,EAAK,SAAU,GAC/B,CAACH,EAAcG,EAAK,SAAU,GAEvB,IAAI,UAAWF,EAAQ,yEAA0E,YAAaE,EAAK,SAAU,CAAE,EAGjI,KAXC,IAAI,UAAWF,EAAQ,qEAAsEG,CAAQ,CAAE,CAYhH,CAKAR,EAAO,QAAUM,ICrEjB,IAAAG,EAAAC,EAAA,SAAAC,EAAAC,EAAA,CAAAA,EAAA,SACI,IACA,MACA,OACA,WACA,KACA,MACA,MACA,MACA,KACA,KACA,IACA,KACA,OACA,MACA,KACA,IACA,QACA,IACA,IACA,OACA,KACA,SACA,OACA,OACA,KACA,SACA,IACA,MACA,MACA,MACA,OACA,UACA,IACA,MACA,OACA,QACA,QACA,KACA,QACA,MACA,IACA,MACA,MACA,OACA,SACA,KACA,MACA,OACA,UACA,MACA,UACA,MACA,MACA,IACA,KACA,KACA,KACA,OACA,KACA,KACA,MACA,SACA,IACA,OACA,IACA,IACA,OACA,MACA,IACA,OACA,MACA,KACA,QACA,OACA,KACA,SACA,IACA,OACA,QACA,OACA,KACA,MACA,MACA,MACA,IACA,KACA,MACA,MACA,KACA,OACA,OACA,KACA,MACA,MACA,IACA,MACA,MACA,IACA,IACA,IACA,OACA,QACA,MACA,SACA,QACA,KACA,OACA,OACA,IACA,OACA,OACA,MACA,QACA,OACA,OACA,QACA,QACA,OACA,OACA,QACA,SACA,OACA,KACA,MACA,IACA,KACA,IACA,IACA,MACA,KACA,OACA,OACA,OACA,OACA,OACA,QACA,QACA,MACA,QACA,MACA,OACA,QACA,IACA,IACA,MACA,GACJ,ICnJA,IAAAC,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAoB,QAAS,mCAAoC,EACjEC,EAAW,QAAS,sBAAuB,EAC3CC,EAAU,QAAS,6BAA8B,EACjDC,EAAY,QAAS,+BAAgC,EACrDC,EAAY,QAAS,+BAAgC,EACrDC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAW,QAAS,oCAAqC,EAAE,QAC3DC,EAAS,QAAS,uBAAwB,EAC1CC,EAAW,IACXC,EAAY,IAKZC,EAAY,KAiChB,SAASC,EAASC,EAAKC,EAAU,CAChC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAK,CAACd,EAAUO,CAAI,EACnB,MAAM,IAAI,UAAWL,EAAQ,kEAAmEK,CAAI,CAAE,EAGvG,GADAI,EAAO,CAAC,EACH,UAAU,OAAS,IACvBC,EAAMT,EAAUQ,EAAMH,CAAQ,EACzBI,GACJ,MAAMA,EAQR,IALAH,EAAaR,EAAUU,EAAK,WAAaP,CAAU,EACnDG,EAAMZ,EAAmBY,CAAI,EAC7BA,EAAMV,EAASU,EAAKF,EAAW,GAAI,EACnCK,EAAQd,EAAUW,CAAI,EACtBM,EAAM,GACAC,EAAI,EAAGA,EAAIJ,EAAM,OAAQI,IACzBL,EAAYV,EAAWW,EAAOI,CAAE,CAAE,CAAE,IAAM,KAC9CD,GAAOf,EAAWY,EAAOI,CAAE,EAAE,OAAQ,CAAE,CAAE,GAG3C,OAAOD,CACR,CAKAnB,EAAO,QAAUY,IChEjB,IAAIS,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_validate", "__commonJSMin", "exports", "module", "isPlainObject", "hasOwnProp", "isStringArray", "isEmptyArray", "format", "validate", "opts", "options", "require_stopwords", "__commonJSMin", "exports", "module", "require_main", "__commonJSMin", "exports", "module", "removePunctuation", "tokenize", "replace", "uppercase", "lowercase", "isString", "contains", "format", "validate", "STOPWORDS", "RE_HYPHEN", "acronym", "str", "options", "isStopWord", "words", "opts", "err", "out", "i", "main"]
}
