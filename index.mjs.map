{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert-is-plain-object' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport { primitives as isStringArray } from '@stdlib/assert-is-string-array' ;\nimport isEmptyArray from '@stdlib/assert-is-empty-array' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - options to validate\n* @param {StringArray} [options.stopwords] - array of custom stop words\n* @returns {(null|Error)} error object or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'stopwords': [ 'of' ]\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( '0h52h', options ) );\n\t}\n\tif ( hasOwnProp( options, 'stopwords' ) ) {\n\t\topts.stopwords = options.stopwords;\n\t\tif (\n\t\t\t!isStringArray( opts.stopwords ) &&\n\t\t\t!isEmptyArray( opts.stopwords )\n\t\t) {\n\t\t\treturn new TypeError( format( '0h5B1', 'stopwords', opts.stopwords ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport removePunctuation from '@stdlib/string-remove-punctuation' ;\nimport tokenize from '@stdlib/nlp-tokenize' ;\nimport replace from '@stdlib/string-base-replace' ;\nimport uppercase from '@stdlib/string-base-uppercase' ;\nimport lowercase from '@stdlib/string-base-lowercase' ;\nimport { isPrimitive as isString } from '@stdlib/assert-is-string' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport validate from './validate.js' ;\nimport STOPWORDS from './stopwords.json' ;\n\n\n// VARIABLES //\n\nvar RE_HYPHEN = /-/g;\n\n\n// MAIN //\n\n/**\n* Generates an acronym for a given string.\n*\n* ## Notes\n*\n* -   The acronym is generated by capitalizing the first letter of each word in the string.\n* -   The function removes stop words from the string before generating the acronym.\n* -   The function splits hyphenated words and uses the first character of each hyphenated part.\n*\n* @param {string} str - input string\n* @param {Options} [options] - function options\n* @param {StringArray} [options.stopwords] - custom stop words\n* @throws {TypeError} must provide a string primitive\n* @throws {TypeError} must provide valid options\n* @returns {string} generated acronym\n*\n* @example\n* var out = acronym( 'the quick brown fox' );\n* // returns 'QBF'\n*\n* @example\n* var out = acronym( 'Hard-boiled eggs' );\n* // returns 'HBE'\n*\n* @example\n* var out = acronym( 'National Association of Securities Dealers Automated Quotation' );\n* // returns 'NASDAQ'\n*/\nfunction acronym( str, options ) {\n\tvar stopwords;\n\tvar words;\n\tvar opts;\n\tvar err;\n\tvar out;\n\tvar i;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( '0h53R', str ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tstopwords = opts.stopwords || STOPWORDS;\n\tstr = removePunctuation( str );\n\tstr = replace( str, RE_HYPHEN, ' ' );\n\twords = tokenize( str );\n\tout = '';\n\tfor ( i = 0; i < words.length; i++ ) {\n\t\tif ( stopwords.indexOf( lowercase( words[ i ] ) ) === -1 ) {\n\t\t\tout += uppercase( words[ i ].charAt( 0 ) );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default acronym;\n"],"names":["validate","opts","options","isPlainObject","hasOwnProp","stopwords","isStringArray","isEmptyArray","TypeError","format","RE_HYPHEN","acronym","str","words","err","out","i","isString","arguments","length","STOPWORDS","removePunctuation","replace","tokenize","indexOf","lowercase","uppercase","charAt"],"mappings":";;mhCAkDA,SAASA,EAAUC,EAAMC,GACxB,OAAMC,EAAeD,IAGhBE,EAAYF,EAAS,eACzBD,EAAKI,UAAYH,EAAQG,UAEvBC,EAAeL,EAAKI,YACpBE,EAAcN,EAAKI,YAKf,KAHE,IAAIG,UAAWC,EAAQ,QAAS,YAAaR,EAAKI,YARnD,IAAIG,UAAWC,EAAQ,QAASP,o5BCjBrCQ,EAAY,KAiChB,SAASC,EAASC,EAAKV,GACtB,IAAIG,EACAQ,EACAZ,EACAa,EACAC,EACAC,EAEJ,IAAMC,EAAUL,GACf,MAAM,IAAIJ,UAAWC,EAAQ,QAASG,IAGvC,GADAX,EAAO,GACFiB,UAAUC,OAAS,IACvBL,EAAMd,EAAUC,EAAMC,IAErB,MAAMY,EAQR,IALAT,EAAYJ,EAAKI,WAAae,EAC9BR,EAAMS,EAAmBT,GACzBA,EAAMU,EAASV,EAAKF,EAAW,KAC/BG,EAAQU,EAAUX,GAClBG,EAAM,GACAC,EAAI,EAAGA,EAAIH,EAAMM,OAAQH,KACyB,IAAlDX,EAAUmB,QAASC,EAAWZ,EAAOG,OACzCD,GAAOW,EAAWb,EAAOG,GAAIW,OAAQ,KAGvC,OAAOZ"}