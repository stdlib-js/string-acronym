{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isStringArray = require( '@stdlib/assert-is-string-array' ).primitives;\nvar isEmptyArray = require( '@stdlib/assert-is-empty-array' );\nvar format = require( '@stdlib/error-tools-fmtprodmsg' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - options to validate\n* @param {StringArray} [options.stopwords] - array of custom stop words\n* @returns {(null|Error)} error object or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'stopwords': [ 'of' ]\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( '0h52h', options ) );\n\t}\n\tif ( hasOwnProp( options, 'stopwords' ) ) {\n\t\topts.stopwords = options.stopwords;\n\t\tif (\n\t\t\t!isStringArray( opts.stopwords ) &&\n\t\t\t!isEmptyArray( opts.stopwords )\n\t\t) {\n\t\t\treturn new TypeError( format( '0h5B1', 'stopwords', opts.stopwords ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar removePunctuation = require( '@stdlib/string-remove-punctuation' );\nvar tokenize = require( '@stdlib/nlp-tokenize' );\nvar replace = require( '@stdlib/string-replace' );\nvar uppercase = require( '@stdlib/string-uppercase' );\nvar lowercase = require( '@stdlib/string-lowercase' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar format = require( '@stdlib/error-tools-fmtprodmsg' );\nvar validate = require( './validate.js' );\nvar STOPWORDS = require( './stopwords.json' );\n\n\n// VARIABLES //\n\nvar RE_HYPHEN = /-/g;\n\n\n// MAIN //\n\n/**\n* Generates an acronym for a given string.\n*\n* ## Notes\n*\n* -   The acronym is generated by capitalizing the first letter of each word in the string.\n* -   The function removes stop words from the string before generating the acronym.\n* -   The function splits hyphenated words and uses the first character of each hyphenated part.\n*\n* @param {string} str - input string\n* @param {Options} [options] - function options\n* @param {StringArray} [options.stopwords] - custom stop words\n* @throws {TypeError} must provide a string primitive\n* @throws {TypeError} must provide valid options\n* @returns {string} generated acronym\n*\n* @example\n* var out = acronym( 'the quick brown fox' );\n* // returns 'QBF'\n*\n* @example\n* var out = acronym( 'Hard-boiled eggs' );\n* // returns 'HBE'\n*\n* @example\n* var out = acronym( 'National Association of Securities Dealers Automated Quotation' );\n* // returns 'NASDAQ'\n*/\nfunction acronym( str, options ) {\n\tvar stopwords;\n\tvar words;\n\tvar opts;\n\tvar err;\n\tvar out;\n\tvar i;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( '0h53R', str ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tstopwords = opts.stopwords || STOPWORDS;\n\tstr = removePunctuation( str );\n\tstr = replace( str, RE_HYPHEN, ' ' );\n\twords = tokenize( str );\n\tout = '';\n\tfor ( i = 0; i < words.length; i++ ) {\n\t\tif ( stopwords.indexOf( lowercase( words[ i ] ) ) === -1 ) {\n\t\t\tout += uppercase( words[ i ].charAt( 0 ) );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = acronym;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Generate an acronym for a given string.\n*\n* @module @stdlib/string-acronym\n*\n* @example\n* var acronym = require( '@stdlib/string-acronym' );\n*\n* var out = acronym( 'National Association of Securities Dealers Automated Quotation' );\n* // returns 'NASDAQ'\n*\n* out = acronym( 'To be determined...', {\n*     'stopwords': []\n* });\n* // returns 'TBD'\n*/\n\n// MODULES //\n\nvar acronym = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = acronym;\n"],"names":["isPlainObject","require$$0","hasOwnProp","require$$1","isStringArray","require$$2","primitives","isEmptyArray","require$$3","format","require$$4","validate_1","opts","options","stopwords","TypeError","removePunctuation","tokenize","replace","uppercase","lowercase","isString","require$$5","isPrimitive","require$$6","validate","require$$7","STOPWORDS","RE_HYPHEN","lib","str","words","err","out","i","arguments","length","indexOf","charAt"],"mappings":";;67BAsBA,IAAIA,EAAgBC,EAChBC,EAAaC,EACbC,EAAgBC,EAA4CC,WAC5DC,EAAeC,EACfC,EAASC,EA2Cb,IAAAC,EAnBA,SAAmBC,EAAMC,GACxB,OAAMb,EAAea,IAGhBX,EAAYW,EAAS,eACzBD,EAAKE,UAAYD,EAAQC,UAEvBV,EAAeQ,EAAKE,YACpBP,EAAcK,EAAKE,YAKf,KAHE,IAAIC,UAAWN,EAAQ,QAAS,YAAaG,EAAKE,YARnD,IAAIC,UAAWN,EAAQ,QAASI,KC9BrCG,EAAoBf,EACpBgB,EAAWd,EACXe,EAAUb,EACVc,EAAYX,EACZY,EAAYV,EACZW,EAAWC,EAAsCC,YACjDd,EAASe,EACTC,EAAWC,EACXC,44BAKAC,EAAY,KAmEhB,IC1DAC,EDwBA,SAAkBC,EAAKjB,GACtB,IAAIC,EACAiB,EACAnB,EACAoB,EACAC,EACAC,EAEJ,IAAMb,EAAUS,GACf,MAAM,IAAIf,UAAWN,EAAQ,QAASqB,IAGvC,GADAlB,EAAO,GACFuB,UAAUC,OAAS,IACvBJ,EAAMP,EAAUb,EAAMC,IAErB,MAAMmB,EAQR,IALAlB,EAAYF,EAAKE,WAAaa,EAC9BG,EAAMd,EAAmBc,GACzBA,EAAMZ,EAASY,EAAKF,EAAW,KAC/BG,EAAQd,EAAUa,GAClBG,EAAM,GACAC,EAAI,EAAGA,EAAIH,EAAMK,OAAQF,KACyB,IAAlDpB,EAAUuB,QAASjB,EAAWW,EAAOG,OACzCD,GAAOd,EAAWY,EAAOG,GAAII,OAAQ,KAGvC,OAAOL"}